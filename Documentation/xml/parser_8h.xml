<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="parser_8h" kind="file" language="C++">
    <compoundname>parser.h</compoundname>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <includedby refid="manipulacao__da__stack_8c" local="yes">manipulacao_da_stack.c</includedby>
    <includedby refid="parser_8c" local="yes">parser.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="2">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>parser.c</label>
        <link refid="parser_8c"/>
      </node>
      <node id="1">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="3">
        <label>manipulacao_da_stack.c</label>
        <link refid="manipulacao__da__stack_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="parser_8h_1ae64b4569c14ca9d64d95cb08c97cf936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse</definition>
        <argsstring>(STACK *s, STACK *letras, char *line)</argsstring>
        <name>parse</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>letras</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>A função parse recebe uma stack e uma linha (vindas da main), percorre essa linha separa em token e envia-os um a um para o tokenizador que os vai interpretar. </para>
        </briefdescription>
        <detaileddescription>
<para>Saindo do ciclo for, a função print_stack imprime a stack. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letras</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem das letras como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha a ser lida. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parser.h" line="2" column="6" bodyfile="parser.c" bodystart="22" bodyend="31" declfile="parser.h" declline="2" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="parser_8h_1a7181cad0d6d8f44f68a31d4f295f8e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parse2</definition>
        <argsstring>(STACK *s, STACK *letras, char *line)</argsstring>
        <name>parse2</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>letras</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>A função parse2 está responsável por ler linhas subsequentes à primeira. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letras</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem das letras como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Linha a ser lida. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="parser.h" line="3" column="6" bodyfile="parser.c" bodystart="40" bodyend="47" declfile="parser.h" declline="3" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parser_8h_1ae64b4569c14ca9d64d95cb08c97cf936" kindref="member">parse</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*letras,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line);</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="parser_8h_1a7181cad0d6d8f44f68a31d4f295f8e6b" kindref="member">parse2</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*letras,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*line);</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="parser.h"/>
  </compounddef>
</doxygen>
