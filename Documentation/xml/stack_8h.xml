<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="stack_8h" kind="file" language="C++">
    <compoundname>stack.h</compoundname>
    <includedby refid="maths_8h" local="yes">maths.h</includedby>
    <includedby refid="maths_8c" local="yes">maths.c</includedby>
    <includedby refid="parser_8c" local="yes">parser.c</includedby>
    <includedby refid="stack_8c" local="yes">stack.c</includedby>
    <invincdepgraph>
      <node id="5">
        <label>stack.c</label>
        <link refid="stack_8c"/>
      </node>
      <node id="1">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>maths.c</label>
        <link refid="maths_8c"/>
      </node>
      <node id="2">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>parser.c</label>
        <link refid="parser_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structSTACK" prot="public">STACK</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stack_8h_1a8bedb3c812e6f4669774331392c72d0a" prot="public" static="no">
        <name>LENGTH_STACK</name>
        <initializer>5120</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="4" column="9" bodyfile="stack.h" bodystart="4" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8h_1ad4ef53e7d74fdb084ff2236e9128b3d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structSTACK" kindref="compound">STACK</ref></type>
        <definition>STACK NEW_STACK</definition>
        <argsstring>()</argsstring>
        <name>NEW_STACK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Simão Quintela \brlef NEW_STACK - Função responsável por criar e inicializar a stack.</para>
</simplesect>
<simplesect kind="return"><para>Retorna a Stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="12" column="7" bodyfile="stack.c" bodystart="16" bodyend="22" declfile="stack.h" declline="12" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ac119efd8eee287cd02174dbf417feacd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PUSH</definition>
        <argsstring>(STACK *s, int valor)</argsstring>
        <name>PUSH</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Simão Quintela \brlef Função PUSH - Função responsável por acrescentar elementos à stack e incrementar o stack pointer. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>valor</parametername>
</parameternamelist>
<parameterdescription>
<para>- valor a colocar no local para onde o apontador está a apontar antes do incremento. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="13" column="6" bodyfile="stack.c" bodystart="30" bodyend="34" declfile="stack.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ace260e73cb048c8c06cf9d63889f5578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long POP</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>POP</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Nuno Costa \brlef Função POP - Função responsável por retirar o elemento que está no topo da stack e decrementar o stack pointer.</para>
</simplesect>
<simplesect kind="return"><para>decrementa 1 posição ao apontador e retorna o elemento que está nessa posição </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="14" column="6" bodyfile="stack.c" bodystart="43" bodyend="46" declfile="stack.h" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a5c74265888d9b3fe150735121868caa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PRINT_STACK</definition>
        <argsstring>(STACK s)</argsstring>
        <name>PRINT_STACK</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref></type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Nuno Costa \brlef Função PRINT_STACK - Função responsável por imprimir a stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="15" column="6" bodyfile="stack.c" bodystart="52" bodyend="59" declfile="stack.h" declline="15" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>___STACK_H___</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>___STACK_H___</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4" refid="stack_8h_1a8bedb3c812e6f4669774331392c72d0a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LENGTH_STACK<sp/>5120</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="structSTACK" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7" refid="structSTACK_1a9567dadae022bfe7216429f68644de31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>array[<ref refid="stack_8h_1a8bedb3c812e6f4669774331392c72d0a" kindref="member">LENGTH_STACK</ref>];</highlight></codeline>
<codeline lineno="8" refid="structSTACK_1a34713f9f94a01dcc0642d0ea0870a335" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structSTACK_1a34713f9f94a01dcc0642d0ea0870a335" kindref="member">pos</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal">}<sp/><ref refid="structSTACK" kindref="compound">STACK</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="structSTACK" kindref="compound">STACK</ref><sp/><ref refid="stack_8h_1ad4ef53e7d74fdb084ff2236e9128b3d5" kindref="member">NEW_STACK</ref>();</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valor);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a5c74265888d9b3fe150735121868caa8" kindref="member">PRINT_STACK</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>s);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="stack.h"/>
  </compounddef>
</doxygen>
