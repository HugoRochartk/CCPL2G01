<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="stack_8h" kind="file" language="C++">
    <compoundname>stack.h</compoundname>
    <includes local="no">assert.h</includes>
    <includedby refid="parser_8h" local="yes">parser.h</includedby>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <includedby refid="manipulacao__da__stack_8c" local="yes">manipulacao_da_stack.c</includedby>
    <includedby refid="maths_8h" local="yes">maths.h</includedby>
    <includedby refid="manipulacao__da__stack_8h" local="yes">manipulacao_da_stack.h</includedby>
    <includedby refid="maths_8c" local="yes">maths.c</includedby>
    <includedby refid="parser_8c" local="yes">parser.c</includedby>
    <includedby refid="stack_8c" local="yes">stack.c</includedby>
    <includedby refid="tokenizador_8c" local="yes">tokenizador.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="1">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>parser.c</label>
        <link refid="parser_8c"/>
      </node>
      <node id="2">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>manipulacao_da_stack.c</label>
        <link refid="manipulacao__da__stack_8c"/>
      </node>
      <node id="9">
        <label>manipulacao_da_stack.h</label>
        <link refid="manipulacao__da__stack_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>maths.c</label>
        <link refid="maths_8c"/>
      </node>
      <node id="6">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="10">
        <label>stack.c</label>
        <link refid="stack_8c"/>
      </node>
      <node id="1">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>tokenizador.c</label>
        <link refid="tokenizador_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structdata" prot="public">data</innerclass>
    <innerclass refid="structstack" prot="public">stack</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stack_8h_1aa7e195e1283260f6225089d9c6e4f184" prot="public" static="no">
        <name>STACK_OPERATION_PROTO</name>
        <param><defname>_type</defname></param>
        <param><defname>_name</defname></param>
        <initializer>	void push_##_name(<ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *s, _type val);		\
	_type pop_##_name(<ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *s);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="42" column="9" bodyfile="stack.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" prot="public" static="no" strong="no">
        <type></type>
        <name>TYPE</name>
        <enumvalue id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" prot="public">
          <name>LONG</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" prot="public">
          <name>DOUBLE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" prot="public">
          <name>CHAR</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aee847e634a4297b274316de8a8ca9921" prot="public">
          <name>STRING</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Struct que enumera os tipos e que vai aplica-los na struct data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="9" column="14" bodyfile="stack.h" bodystart="9" bodyend="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" prot="public" static="no">
        <type>struct <ref refid="structdata" kindref="compound">data</ref></type>
        <definition>typedef struct data DATA</definition>
        <argsstring></argsstring>
        <name>DATA</name>
        <briefdescription>
<para>Struct que contém os vários tipos de dados da Stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="21" column="6"/>
      </memberdef>
      <memberdef kind="typedef" id="stack_8h_1ade8bb1f37e07eb511f3873082665d739" prot="public" static="no">
        <type>struct <ref refid="structstack" kindref="compound">stack</ref></type>
        <definition>typedef struct stack STACK</definition>
        <argsstring></argsstring>
        <name>STACK</name>
        <briefdescription>
<para>Struct que define a estrutura da stack, tendo ela uma inicialização com os tipos definidos em data, com uma variável que dá o tamanho e o número de elementos presentes na stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="30" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8h_1aae9dbe2826c50633f609d0a71b5fbcd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int has_type</definition>
        <argsstring>(DATA elem, int mask)</argsstring>
        <name>has_type</name>
        <param>
          <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
          <declname>elem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Função que verifica o tipo de um token. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Retorna verdadeiro se o elemento e a máscara tiverem o mesmo tipo, senão retorna falso </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="32" column="5" bodyfile="stack.c" bodystart="17" bodyend="19" declfile="stack.h" declline="32" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a4002d1ff72ad115103ac2daef3200bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
        <definition>STACK* new_stack</definition>
        <argsstring>()</argsstring>
        <name>new_stack</name>
        <briefdescription>
<para>Função responsável pela criação da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>calloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Função pré-definida (stdlib.h) que aloca o espaço que o utilizador insere e retorna um apontador para o início da memória alocada </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retorna uma stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="33" column="7" bodyfile="stack.c" bodystart="26" bodyend="31" declfile="stack.h" declline="33" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a1e86b7a7ef501bffae1ec8c82a0220eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push</definition>
        <argsstring>(STACK *s, DATA elem)</argsstring>
        <name>push</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
          <declname>elem</declname>
        </param>
        <briefdescription>
<para>Função responsável por guardar o elemento no topo da stack e incrementar o stack pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>realloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Caso a memória alocada não seja suficiente para dar push ao token, a função pré-definida (stdlib.h) realloc aloca mais 100 células de memória. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="34" column="6" bodyfile="stack.c" bodystart="37" bodyend="44" declfile="stack.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a28bdc96407c992586646198197537cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA pop</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>pop</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função responsável por decrementar o stack pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Retorna o valor para o qual aponta o stack pointer depois de ser decrementado. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="35" column="6" bodyfile="stack.c" bodystart="50" bodyend="53" declfile="stack.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a1c8a0d720a37d9d2a5844e6013c915c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA top</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>top</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função responsável por retornar o que está no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Retorna o que está no topo da stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="36" column="6" bodyfile="stack.c" bodystart="59" bodyend="61" declfile="stack.h" declline="36" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ad9399940188d190bc566ffe84ab04bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA penultimo</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>penultimo</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função responsável por retornar o que está na posição anterior ao topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Retorna o que está na posição anterior ao topo da stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="37" column="6" bodyfile="stack.c" bodystart="67" bodyend="69" declfile="stack.h" declline="37" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ae31d2a4c10db0d5b01ecd8a8aab01cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int is_empty</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>is_empty</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que diz se a stack está vazia. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Se a stack tiver vazia retorna 1 senão retorna. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="38" column="5" bodyfile="stack.c" bodystart="75" bodyend="77" declfile="stack.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a42b87bab2d601cb02900935c9b80fc23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_stack</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>print_stack</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Imprime a stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="39" column="6" bodyfile="stack.c" bodystart="90" bodyend="106" declfile="stack.h" declline="39" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ab9f4872d50071a99ea9fc55d74d5524c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref></type>
        <definition>DATA enesimo</definition>
        <argsstring>(STACK *s, int n)</argsstring>
        <name>enesimo</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Função responsável por retornar o N-ésimo elemento a partir do topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Retorna o N-ésimo elemento a partir do topo da stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="40" column="6" bodyfile="stack.c" bodystart="83" bodyend="85" declfile="stack.h" declline="40" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>___STACK_H___</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>___STACK_H___</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref><sp/>=<sp/>1,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref><sp/>=<sp/>2,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref><sp/>=<sp/>4,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aee847e634a4297b274316de8a8ca9921" kindref="member">STRING</ref><sp/>=<sp/>8}<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">TYPE</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structdata" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdata" kindref="compound">data</ref><sp/>{</highlight></codeline>
<codeline lineno="15" refid="structdata_1a876bb066356bbdd8dbadc449e4caf33c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7" kindref="member">TYPE</ref><sp/><ref refid="structdata_1a876bb066356bbdd8dbadc449e4caf33c" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="structdata_1af3e6e49ca276f2a351f97bad4738368e" kindref="member">LONG</ref>;</highlight></codeline>
<codeline lineno="18" refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structdata_1aecc3f36c8ad5b0d05fee3f3372aee7d8" kindref="member">DOUBLE</ref>;</highlight></codeline>
<codeline lineno="19" refid="structdata_1a26ec264014a6fcbcdbc5e69936e59724" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structdata_1a26ec264014a6fcbcdbc5e69936e59724" kindref="member">CHAR</ref>;</highlight></codeline>
<codeline lineno="20" refid="structdata_1a3beeb46678aaab2565d0a2669c03ea1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structdata_1a3beeb46678aaab2565d0a2669c03ea1f" kindref="member">STRING</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}<sp/><ref refid="stack_8h_1a4e41b34fb87c918e012cde5b33af31bf" kindref="member">DATA</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structstack" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstack" kindref="compound">stack</ref>{</highlight></codeline>
<codeline lineno="27" refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>*<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="28" refid="structstack_1a926a597bae913d1bf4772be35c14b71e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1a926a597bae913d1bf4772be35c14b71e" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="29" refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1a1ed7f871b976cba29e4c5a5c6df401dd" kindref="member">n_elems</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}<sp/><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1aae9dbe2826c50633f609d0a71b5fbcd3" kindref="member">has_type</ref>(<ref refid="structdata" kindref="compound">DATA</ref><sp/>elem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="structstack" kindref="compound">STACK</ref><sp/>*<ref refid="stack_8h_1a4002d1ff72ad115103ac2daef3200bc5" kindref="member">new_stack</ref>();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>elem);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack_8h_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack_8h_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack_8h_1ad9399940188d190bc566ffe84ab04bf6" kindref="member">penultimo</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1ae31d2a4c10db0d5b01ecd8a8aab01cfc" kindref="member">is_empty</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a42b87bab2d601cb02900935c9b80fc23" kindref="member">print_stack</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><ref refid="structdata" kindref="compound">DATA</ref><sp/><ref refid="stack_8h_1ab9f4872d50071a99ea9fc55d74d5524c" kindref="member">enesimo</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="stack_8h_1aa7e195e1283260f6225089d9c6e4f184" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STACK_OPERATION_PROTO(_type,<sp/>_name)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>push_##_name(STACK<sp/>*s,<sp/>_type<sp/>val);<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_type<sp/>pop_##_name(STACK<sp/>*s);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="stack_8h_1aa7e195e1283260f6225089d9c6e4f184" kindref="member">STACK_OPERATION_PROTO</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="stack_8h_1aa7e195e1283260f6225089d9c6e4f184" kindref="member">STACK_OPERATION_PROTO</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="stack_8h_1aa7e195e1283260f6225089d9c6e4f184" kindref="member">STACK_OPERATION_PROTO</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><ref refid="stack_8h_1aa7e195e1283260f6225089d9c6e4f184" kindref="member">STACK_OPERATION_PROTO</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*,<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aee847e634a4297b274316de8a8ca9921" kindref="member">STRING</ref>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="stack.h"/>
  </compounddef>
</doxygen>
