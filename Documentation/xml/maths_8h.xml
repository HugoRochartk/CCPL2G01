<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="maths_8h" kind="file" language="C++">
    <compoundname>maths.h</compoundname>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <includedby refid="maths_8c" local="yes">maths.c</includedby>
    <includedby refid="parser_8c" local="yes">parser.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>stack.h</label>
        <link refid="stack_8h"/>
      </node>
      <node id="1">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>maths.c</label>
        <link refid="maths_8c"/>
      </node>
      <node id="1">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>parser.c</label>
        <link refid="parser_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="maths_8h_1ab036ce08365356af3d41ddf51b84d4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soma</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>soma</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função soma - Função responsável por fazer a soma. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="2" column="6" bodyfile="maths.c" bodystart="17" bodyend="21" declfile="maths.h" declline="2" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1a90cd2dffdaa4518db18fc9804904e16e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void subtrai</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>subtrai</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função subtrai - Função responsável por fazer a subtração entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="5" column="6" bodyfile="maths.c" bodystart="28" bodyend="32" declfile="maths.h" declline="5" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1a1a83e81a0989cfe6e96090f7fc2d2198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void multiplica</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>multiplica</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função multiplica - Função responsável por fazer a multiplicação entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="8" column="6" bodyfile="maths.c" bodystart="39" bodyend="43" declfile="maths.h" declline="8" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1a9d9afcdfcf47ca08bcd8b31031871b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dividir</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>dividir</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função dividir - Função responsável por fazer a divisão inteira entre dois números, garantindo que X é diferente de zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="11" column="6" bodyfile="maths.c" bodystart="50" bodyend="55" declfile="maths.h" declline="11" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1a954e9383095a145d1cb6a1a2d26aa451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decrementa</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>decrementa</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função decrementa - Função responsável por fazer a decrementação. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="14" column="6" bodyfile="maths.c" bodystart="62" bodyend="65" declfile="maths.h" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1a10508636af2171860e5d038a7d07f7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void incrementa</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>incrementa</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função incrementa - Função responsável por fazer a incrementação. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="17" column="6" bodyfile="maths.c" bodystart="72" bodyend="75" declfile="maths.h" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1ac47c510fef88bce38e48b07b6017c54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modulo</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>modulo</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função modulo - Função responsável por devolver o resto da divisão inteira entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="20" column="6" bodyfile="maths.c" bodystart="82" bodyend="86" declfile="maths.h" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1aee5455267a8b55e25e0a08fabf4a52f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void expoente</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>expoente</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função expoente - Função responsável por fazer a exponencialização entre dois números sendo o primeiro a base e o segundo o expoente. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="23" column="6" bodyfile="maths.c" bodystart="93" bodyend="97" declfile="maths.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1a24a2dde30b31ba5f47e7d2629db92f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void e</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>e</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função e - Função responsável por determinar a interseção de bits entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="26" column="6" bodyfile="maths.c" bodystart="104" bodyend="108" declfile="maths.h" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1a3429e63d3d7972ee8ebddf4423934dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ou</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>ou</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função ou - Função responsável por determinar a reunião de bits entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="29" column="6" bodyfile="maths.c" bodystart="115" bodyend="119" declfile="maths.h" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1a83f2bddece3797ca5d999ca6add31383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xorr</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>xorr</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função xorr - Função responsável por colocar a 0 todos os bits em comum e a 1 todos os bits diferentes entre si, de dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="32" column="6" bodyfile="maths.c" bodystart="127" bodyend="131" declfile="maths.h" declline="32" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="maths_8h_1a1d7fc0fc91e406a305818024758e17ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nott</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>nott</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função nott - Função responsável por inverter todos os bits de um número. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.h" line="36" column="6" bodyfile="maths.c" bodystart="138" bodyend="141" declfile="maths.h" declline="36" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1ab036ce08365356af3d41ddf51b84d4b6" kindref="member">soma</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1a90cd2dffdaa4518db18fc9804904e16e" kindref="member">subtrai</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1a1a83e81a0989cfe6e96090f7fc2d2198" kindref="member">multiplica</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1a9d9afcdfcf47ca08bcd8b31031871b06" kindref="member">dividir</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1a954e9383095a145d1cb6a1a2d26aa451" kindref="member">decrementa</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1a10508636af2171860e5d038a7d07f7e0" kindref="member">incrementa</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1ac47c510fef88bce38e48b07b6017c54e" kindref="member">modulo</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1aee5455267a8b55e25e0a08fabf4a52f8" kindref="member">expoente</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1a24a2dde30b31ba5f47e7d2629db92f5a" kindref="member">e</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1a3429e63d3d7972ee8ebddf4423934dcd" kindref="member">ou</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1a83f2bddece3797ca5d999ca6add31383" kindref="member">xorr</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8h_1a1d7fc0fc91e406a305818024758e17ae" kindref="member">nott</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
    </programlisting>
    <location file="maths.h"/>
  </compounddef>
</doxygen>
