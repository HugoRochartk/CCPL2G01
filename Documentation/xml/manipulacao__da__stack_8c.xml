<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="manipulacao__da__stack_8c" kind="file" language="C++">
    <compoundname>manipulacao_da_stack.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <includes refid="maths_8h" local="yes">maths.h</includes>
    <includes refid="parser_8h" local="yes">parser.h</includes>
    <incdepgraph>
      <node id="7">
        <label>parser.h</label>
        <link refid="parser_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>assert.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="1">
        <label>manipulacao_da_stack.c</label>
        <link refid="manipulacao__da__stack_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="manipulacao__da__stack_8c_1a8d6e47ebf2e0f23fdaa5f791d9ba84da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rodatres</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>rodatres</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Roda para a esquerda os três elementos que estão no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="19" column="6" bodyfile="manipulacao_da_stack.c" bodystart="19" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1ad2c846231efe7651bd7edec4f3c7d1f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trocadois</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>trocadois</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>troca os dois elementos que estão no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="33" column="6" bodyfile="manipulacao_da_stack.c" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1a6fa63cab9d7d96acf78f8dff5d4f782f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void duplica</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>duplica</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>duplica o elemento que está no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="45" column="6" bodyfile="manipulacao_da_stack.c" bodystart="45" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1a1dda8549184f82c1edce0e7f2579d94e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void popp</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>popp</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>remove o elemento que está no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="57" column="6" bodyfile="manipulacao_da_stack.c" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1a1bd9ef29df6e07b9c78e372df87d2732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copian</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>copian</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>copia o N-ésimo elemento para o topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="66" column="6" bodyfile="manipulacao_da_stack.c" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1a19d6a8ccef6b6915205553b4e55c39c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void converte_para_long</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>converte_para_long</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>converte o elemento que está no topo da stack para um long. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Simão Quintela </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="76" column="6" bodyfile="manipulacao_da_stack.c" bodystart="76" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1ab03f874fda24ded3fc4efe7e63db06ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void converte_para_double</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>converte_para_double</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>converte o elemento que está no topo da stack para um double. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Simão Quintela </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="92" column="6" bodyfile="manipulacao_da_stack.c" bodystart="92" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1a8e9e35eeb711410f1c0362f29998ba30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void converte_para_char</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>converte_para_char</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>converte o elemento que está no topo da stack para um char. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Simão Quintela </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="108" column="6" bodyfile="manipulacao_da_stack.c" bodystart="108" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1abc9ce3a8867fe62b58febe960147e060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ler_linha</definition>
        <argsstring>(STACK *s, STACK *letras)</argsstring>
        <name>ler_linha</name>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>letras</declname>
        </param>
        <briefdescription>
<para>lê uma nova linha e envia-a para o parse2 onde vai ser enviada para o tokenizador para ser interpretada sendo que no fim da sua interpretação não é imprimida. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Simão Quintela </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letras</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem das letras como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="125" column="6" bodyfile="manipulacao_da_stack.c" bodystart="125" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1ac490948b1b7b49849d5ad42aea1b602f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void variaveis</definition>
        <argsstring>(char token, STACK *s, STACK *letras)</argsstring>
        <name>variaveis</name>
        <param>
          <type>char</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>letras</declname>
        </param>
        <briefdescription>
<para>dá push ao valor da letra correspondente para a stack </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para>Letra que vai ser lida </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letras</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem das letras como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="139" column="6" bodyfile="manipulacao_da_stack.c" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="manipulacao__da__stack_8c_1a28ffe3d65cc55edf2213852a05f7a929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atribuivalorvariavel</definition>
        <argsstring>(char c, STACK *s, STACK *letras)</argsstring>
        <name>atribuivalorvariavel</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="stack_8h_1ade8bb1f37e07eb511f3873082665d739" kindref="member">STACK</ref> *</type>
          <declname>letras</declname>
        </param>
        <briefdescription>
<para>Atribuição de valor às letras usadas no comando :letra. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para>Letra que vai receber o valor do topo da stack </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem da stack como parametro </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>letras</parametername>
</parameternamelist>
<parameterdescription>
<para>Passagem das letras como parametro </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="manipulacao_da_stack.c" line="156" column="6" bodyfile="manipulacao_da_stack.c" bodystart="156" bodyend="164"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="5"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="maths_8h" kindref="compound">maths.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parser_8h" kindref="compound">parser.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1a8d6e47ebf2e0f23fdaa5f791d9ba84da" kindref="member">rodatres</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s){<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>carater<sp/>@</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>z<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>y);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>z);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1ad2c846231efe7651bd7edec4f3c7d1f9" kindref="member">trocadois</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s){<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>carater<sp/>&apos;\&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>y<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>y);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1a6fa63cab9d7d96acf78f8dff5d4f782f" kindref="member">duplica</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s){<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>carater<sp/>_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdata" kindref="compound">DATA</ref><sp/>x<sp/>=<sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pop(s);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>x);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1a1dda8549184f82c1edce0e7f2579d94e" kindref="member">popp</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s){<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>carater<sp/>;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a28bdc96407c992586646198197537cd1" kindref="member">pop</ref>(s);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1a1bd9ef29df6e07b9c78e372df87d2732" kindref="member">copian</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s){<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>carater<sp/>$</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>pop_LONG(s);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/><ref refid="stack_8c_1ab9f4872d50071a99ea9fc55d74d5524c" kindref="member">enesimo</ref>(s,<sp/>x));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enesimo<sp/>definida<sp/>na<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1a19d6a8ccef6b6915205553b4e55c39c9" kindref="member">converte_para_long</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stack_8c_1aae9dbe2826c50633f609d0a71b5fbcd3" kindref="member">has_type</ref>(<ref refid="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(s),<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>)){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>pop_DOUBLE(s);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_LONG(s,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)x);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1aae9dbe2826c50633f609d0a71b5fbcd3" kindref="member">has_type</ref>(<ref refid="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(s),<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>)){</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>pop_CHAR(s);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_LONG(s,<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)x);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1ab03f874fda24ded3fc4efe7e63db06ae" kindref="member">converte_para_double</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stack_8c_1aae9dbe2826c50633f609d0a71b5fbcd3" kindref="member">has_type</ref>(<ref refid="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(s),<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>)){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>pop_LONG(s);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_DOUBLE(s,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)x);<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1aae9dbe2826c50633f609d0a71b5fbcd3" kindref="member">has_type</ref>(<ref refid="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(s),<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a4618cf21306b3c647741afa7ebefcab8" kindref="member">CHAR</ref>)){</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>pop_CHAR(s);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_DOUBLE(s,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)x);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1a8e9e35eeb711410f1c0362f29998ba30" kindref="member">converte_para_char</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stack_8c_1aae9dbe2826c50633f609d0a71b5fbcd3" kindref="member">has_type</ref>(<ref refid="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(s),<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7aaee055c4a5aba7d55774e4f1c01dacea" kindref="member">LONG</ref>)){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>pop_LONG(s);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_CHAR(s,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)x);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="stack_8c_1aae9dbe2826c50633f609d0a71b5fbcd3" kindref="member">has_type</ref>(<ref refid="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(s),<sp/><ref refid="stack_8h_1a0bc6723d5d4776ab7cdc646728b775f7a33465d1d419b1074fb259ef444609e92" kindref="member">DOUBLE</ref>)){</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>pop_DOUBLE(s);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_CHAR(s,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)x);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1abc9ce3a8867fe62b58febe960147e060" kindref="member">ler_linha</ref>(<ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*letras){</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>linha[BUFSIZ];</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*new_line<sp/>=<sp/>fgets(linha,<sp/>BUFSIZ,<sp/>stdin);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="parser_8c_1a7181cad0d6d8f44f68a31d4f295f8e6b" kindref="member">parse2</ref>(s,<sp/>letras,<sp/>new_line);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1ac490948b1b7b49849d5ad42aea1b602f" kindref="member">variaveis</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>token,<sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*letras){</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=65;<sp/>i&lt;=90;<sp/>i++){</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(token<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stack_8c_1a1e86b7a7ef501bffae1ec8c82a0220eb" kindref="member">push</ref>(s,<sp/>letras-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[i-65]);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="manipulacao__da__stack_8c_1a28ffe3d65cc55edf2213852a05f7a929" kindref="member">atribuivalorvariavel</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*s,<sp/><ref refid="structstack" kindref="compound">STACK</ref><sp/>*letras){</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=65;<sp/>i&lt;=90;<sp/>i++){</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(c<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>letras-&gt;<ref refid="structstack_1ac18b7057f7be1bcabbfe91eaf98e071f" kindref="member">stack</ref>[i-65]<sp/>=<sp/><ref refid="stack_8c_1a1c8a0d720a37d9d2a5844e6013c915c2" kindref="member">top</ref>(s);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="manipulacao_da_stack.c"/>
  </compounddef>
</doxygen>
