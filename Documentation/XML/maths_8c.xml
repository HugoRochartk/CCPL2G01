<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="maths_8c" kind="file" language="C++">
    <compoundname>maths.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="maths_8h" local="yes">maths.h</includes>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <incdepgraph>
      <node id="5">
        <label>assert.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>stack.h</label>
        <link refid="stack_8h"/>
      </node>
      <node id="6">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>maths.c</label>
        <link refid="maths_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>maths.h</label>
        <link refid="maths_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="maths_8c_1ab036ce08365356af3d41ddf51b84d4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void soma</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>soma</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função soma - Função responsável por fazer a soma. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="17" column="6" bodyfile="maths.c" bodystart="17" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1a90cd2dffdaa4518db18fc9804904e16e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void subtrai</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>subtrai</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função subtrai - Função responsável por fazer a subtração entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="28" column="6" bodyfile="maths.c" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1a1a83e81a0989cfe6e96090f7fc2d2198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void multiplica</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>multiplica</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função multiplica - Função responsável por fazer a multiplicação entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="39" column="6" bodyfile="maths.c" bodystart="39" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1a9d9afcdfcf47ca08bcd8b31031871b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dividir</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>dividir</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função dividir - Função responsável por fazer a divisão inteira entre dois números, garantindo que X é diferente de zero. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="50" column="6" bodyfile="maths.c" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1a954e9383095a145d1cb6a1a2d26aa451" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void decrementa</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>decrementa</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função decrementa - Função responsável por fazer a decrementação. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="62" column="6" bodyfile="maths.c" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1a10508636af2171860e5d038a7d07f7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void incrementa</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>incrementa</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Hugo Rocha \brlef Função incrementa - Função responsável por fazer a incrementação. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="72" column="6" bodyfile="maths.c" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1ac47c510fef88bce38e48b07b6017c54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void modulo</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>modulo</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função modulo - Função responsável por devolver o resto da divisão inteira entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="82" column="6" bodyfile="maths.c" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1aee5455267a8b55e25e0a08fabf4a52f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void expoente</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>expoente</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função expoente - Função responsável por fazer a exponencialização entre dois números sendo o primeiro a base e o segundo o expoente. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="93" column="6" bodyfile="maths.c" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1a24a2dde30b31ba5f47e7d2629db92f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void e</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>e</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função e - Função responsável por determinar a interseção de bits entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="104" column="6" bodyfile="maths.c" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1a3429e63d3d7972ee8ebddf4423934dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ou</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>ou</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função ou - Função responsável por determinar a reunião de bits entre dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="115" column="6" bodyfile="maths.c" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1a83f2bddece3797ca5d999ca6add31383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void xorr</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>xorr</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função xorr - Função responsável por colocar a 0 todos os bits em comum e a 1 todos os bits diferentes entre si, de dois números. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="127" column="6" bodyfile="maths.c" bodystart="127" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="maths_8c_1a1d7fc0fc91e406a305818024758e17ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nott</definition>
        <argsstring>(STACK *s)</argsstring>
        <name>nott</name>
        <param>
          <type><ref refid="structSTACK" kindref="compound">STACK</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Tiago Guedes \brlef Função nott - Função responsável por inverter todos os bits de um número. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="maths.c" line="138" column="6" bodyfile="maths.c" bodystart="138" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="4"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="maths_8h" kindref="compound">maths.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1ab036ce08365356af3d41ddf51b84d4b6" kindref="member">soma</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>X<sp/>+<sp/>Y);</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1a90cd2dffdaa4518db18fc9804904e16e" kindref="member">subtrai</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>Y<sp/>-<sp/>X);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1a1a83e81a0989cfe6e96090f7fc2d2198" kindref="member">multiplica</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>X<sp/>*<sp/>Y);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1a9d9afcdfcf47ca08bcd8b31031871b06" kindref="member">dividir</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(X<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>Y<sp/>/<sp/>X);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1a954e9383095a145d1cb6a1a2d26aa451" kindref="member">decrementa</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>X<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1a10508636af2171860e5d038a7d07f7e0" kindref="member">incrementa</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>X<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1ac47c510fef88bce38e48b07b6017c54e" kindref="member">modulo</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>Y<sp/>%<sp/>X);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1aee5455267a8b55e25e0a08fabf4a52f8" kindref="member">expoente</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>pow(Y,<sp/>X));</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1a24a2dde30b31ba5f47e7d2629db92f5a" kindref="member">e</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>Y<sp/>&amp;<sp/>X);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1a3429e63d3d7972ee8ebddf4423934dcd" kindref="member">ou</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>Y<sp/>|<sp/>X);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1a83f2bddece3797ca5d999ca6add31383" kindref="member">xorr</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>Y<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>Y<sp/>^<sp/>X);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="maths_8c_1a1d7fc0fc91e406a305818024758e17ae" kindref="member">nott</ref>(<ref refid="structSTACK" kindref="compound">STACK</ref><sp/>*s){</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>X<sp/>=<sp/><ref refid="stack_8c_1ace260e73cb048c8c06cf9d63889f5578" kindref="member">POP</ref>(s);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack_8c_1ac119efd8eee287cd02174dbf417feacd" kindref="member">PUSH</ref>(s,<sp/>(~X));</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="maths.c"/>
  </compounddef>
</doxygen>
